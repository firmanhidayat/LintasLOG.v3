"use client";

import { useCallback, useEffect, useRef, useState } from "react";
import { useRouter } from "next/navigation";
import { Field } from "@/components/form/FieldInput";
import { t } from "@/lib/i18n";
import { useI18nReady } from "@/hooks/useI18nReady";

import { goSignIn } from "@/lib/goSignIn";
import { useClickOutside } from "@/hooks/useClickOutside";
import { useDebounced } from "@/hooks/useDebounced";
import { RecordItem } from "@/types/recorditem";

const ORDER_TYPES_URL = process.env.NEXT_PUBLIC_TMS_OTYPE_FORM_URL ?? "";

function isObj(v: unknown): v is Record<string, unknown> {
  return !!v && typeof v === "object";
}
function normalizeItem(it: unknown): RecordItem | null {
  if (typeof it === "string") return { id: it, name: it };
  if (isObj(it)) {
    const idRaw =
      it["id"] ?? it["code"] ?? it["value"] ?? it["key"] ?? it["slug"];
    const nameRaw =
      it["name"] ??
      it["label"] ??
      (typeof idRaw === "string" || typeof idRaw === "number"
        ? String(idRaw)
        : undefined);
    if (
      (typeof idRaw === "string" || typeof idRaw === "number") &&
      typeof nameRaw === "string"
    ) {
      return { id: idRaw, name: nameRaw };
    }
  }
  return null;
}
function normalizeResults(json: unknown): RecordItem[] {
  if (Array.isArray(json)) {
    return json.map(normalizeItem).filter(Boolean) as RecordItem[];
  }
  if (isObj(json)) {
    const candidates = [
      json["data"],
      json["items"],
      json["result"],
      json["records"],
      json["values"],
    ];
    const arr = candidates.find((x) => Array.isArray(x)) as
      | unknown[]
      | undefined;
    if (Array.isArray(arr)) {
      return arr.map(normalizeItem).filter(Boolean) as RecordItem[];
    }
  }
  return [];
}

export default function OrdertypeAutocompleteV2({
  label,
  value,
  onChange,
  disabled,
  placeholder,
}: {
  label: string;
  value: RecordItem | null;
  onChange: (v: RecordItem | null) => void;
  disabled?: boolean;
  placeholder?: string;
}) {
  const { i18nReady, activeLang } = useI18nReady();
  const router = useRouter();
  const [query, setQuery] = useState<string>(value?.name ?? "");
  const [options, setOptions] = useState<RecordItem[]>([]);
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);

  const debounced = useDebounced(query, 250);

  const rootRef = useRef<HTMLDivElement | null>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);
  const popRef = useRef<HTMLDivElement | null>(null);
  const abortRef = useRef<AbortController | null>(null);

  // --- Tambahan state/ref ---
  const cacheRef = useRef(new Map<string, RecordItem[]>());
  const [hasFetched, setHasFetched] = useState(false); // untuk kontrol "no results"

  useClickOutside([rootRef, inputRef, popRef], () => setOpen(false), open);

  const lastFetchKey = useRef<string>("");

  const fetchOptions = useCallback(
    async (q: string) => {
      const k = q.trim();

      if (!ORDER_TYPES_URL) {
        setOptions([]);
        setHasFetched(true);
        return;
      }

      // if (lastFetchKey.current === k) return;
      // lastFetchKey.current = k;
      if (lastFetchKey.current === k && cacheRef.current.has(k)) {
        // sudah punya cache untuk key ini, tidak perlu fetch ulang
        setOptions(cacheRef.current.get(k)!);
        setHasFetched(true);
        return;
      }
      lastFetchKey.current = k;

      // Batalkan req sebelumnya (race-safe)
      // if (abortRef.current)
      abortRef.current?.abort();
      const ac = new AbortController();
      abortRef.current = ac;

      try {
        setLoading(true);
        const url = new URL(ORDER_TYPES_URL);
        url.searchParams.set("query", q);
        url.searchParams.set("page", "1");
        url.searchParams.set("page_size", "80");

        const res = await fetch(url.toString(), {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            "Accept-Language": activeLang ?? "en",
          },
          credentials: "include",
          signal: ac.signal,
        });

        if (res.status === 401) {
          goSignIn({ routerReplace: router.replace });
          return;
        }
        if (!res.ok) {
          setOptions([]);
          setHasFetched(true);
          return;
        }

        const json: unknown = await res.json();
        const list = normalizeResults(json);
        cacheRef.current.set(k, list);
        setOptions(list);
        setHasFetched(true);
      } catch (err) {
        if ((err as Error)?.name !== "AbortError") {
          console.error("[OrdertypeAutocompleteV2] search failed", err);
          setOptions([]);
          setHasFetched(true);
        }
      } finally {
        setLoading(false);
      }
    },
    [router.replace, activeLang]
  );

  useEffect(() => {
    if (!open) return;
    const k = debounced.trim();
    if (cacheRef.current.has(k)) {
      setOptions(cacheRef.current.get(k)!);
      return;
    }
    void fetchOptions(k);
  }, [debounced, open, fetchOptions]);

  useEffect(() => () => abortRef.current?.abort(), []);

  // Sinkronkan nilai tampilan saat prop `value` berubah
  useEffect(() => {
    setQuery(value?.name ?? "");
  }, [value?.id, value?.name]);

  useEffect(() => {
    if (!i18nReady || disabled) return;
    void fetchOptions(""); // prefetch query kosong / default
  }, [i18nReady, disabled, activeLang, fetchOptions]);

  const openPopover = useCallback(async () => {
    if (disabled) return;
    const k = (debounced || "").trim();

    // kalau sudah ada di cache (termasuk hasil prefetch ""), langsung pakai
    if (cacheRef.current.has(k)) {
      setOptions(cacheRef.current.get(k)!);
      setOpen(true);
      return;
    }

    // belum ada cache: fetch dulu, lalu buka
    await fetchOptions(k);
    setOpen(true);
  }, [disabled, debounced, fetchOptions]);

  // ---- Render bersyarat (tidak memengaruhi pemanggilan hooks) ----
  if (!i18nReady) {
    return (
      <div className="space-y-4" data-lang={activeLang}>
        <div className="flex items-center justify-between">
          <div className="h-8 w-40 animate-pulse rounded bg-slate-200" />
          <div className="h-8 w-32 animate-pulse rounded bg-slate-200" />
        </div>
        <div className="h-64 animate-pulse rounded-lg border bg-slate-100" />
      </div>
    );
  }

  return (
    <div ref={rootRef} className="relative">
      <Field.Root
        value={query}
        onChange={(v) => {
          setQuery(v);
          onChange(null);
          setOpen(true);
        }}
        placeholder={
          disabled
            ? t("common.disabled") ?? "Nonaktif"
            : placeholder ??
              t("orders.search_order_type") ??
              "Cari jenis order…"
        }
        inputRef={inputRef}
        disabled={disabled}
        aria-expanded={open}
        aria-busy={loading}
        data-open={open ? "" : undefined}
        data-options-count={options.length}
      >
        <Field.Label>{label}</Field.Label>
        <Field.Input onFocus={openPopover} />
        <Field.Control>
          {!disabled && open && (
            <div ref={popRef} className="relative">
              <ul className="absolute z-10 mt-1 max-h-56 w-full overflow-auto rounded-md border border-gray-200 bg-white shadow-md">
                {loading && (
                  <li className="px-3 py-2 text-sm text-gray-500">
                    {t("common.loading") ?? "Loading…"}
                  </li>
                )}

                {!loading && hasFetched && options.length === 0 && (
                  <li className="px-3 py-2 text-sm text-gray-500">
                    {t("common.no_results") ?? "Tidak ada hasil"}
                  </li>
                )}

                {!loading &&
                  options.length > 0 &&
                  options.map((opt) => (
                    <li
                      key={String(opt.id)}
                      className="cursor-pointer px-3 py-2 text-sm hover:bg-gray-50"
                      // className="block w-full px-3 py-2 text-left hover:bg-slate-100"
                      onPointerDown={(e) => {
                        e.preventDefault();
                        onChange(opt);
                        setQuery(opt.name ?? "");
                        setOpen(false);
                      }}
                      title={opt.name ?? undefined}
                    >
                      <div className="flex items-center justify-between gap-3">
                        <span>{opt.name}</span>
                        {opt.name && (
                          <span className="text-xs text-gray-500">
                            {opt.name}
                          </span>
                        )}
                      </div>
                    </li>
                  ))}
              </ul>
            </div>
          )}
        </Field.Control>
      </Field.Root>
    </div>
  );
}
